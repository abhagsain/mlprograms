library(datasets)  # Load built-in datasets
head(iris)         # Show the first six lines of iris data
summary(iris)      # Summary statistics for iris data
plot(iris)         # Scatterplot matrix for iris data
print(my_string)
m_string = "String"
print(m_string)
print(class(5))
print(class("this is something"))
print(class(charToRaw("this is something")))
name <- "Anurag"
print("Hello this is " + name)
print(name)
name <- "Anurag"
print(name)
print(name)
vectors = c(1,2,3)
print(vectors)
print(vectors[0])
vectors = c(1,2,3)
print(vectors[0])
vectors = c(1,2,3)
print(vectors[2])
setwd("E:/College/3rd Year/6th Semester/ML/Practicals")
getpwd()
# Write a function that returns the larget element in a vectors
# of numbers
nums = c(seq(from=1,to=20))
print(nums)
# Write a function that returns the larget element in a vectors
# of numbers
nums = c(seq(from=1,to=20, by=2))
print(nums)
# Write a function that returns the larget element in a vectors
# of numbers
nums = c(seq(from=1,to=20, by=2))
print(nums)
print(min(nums))
# Write a function that returns the larget element in a vectors
# of numbers
nums = c(seq(from=1,to=20, by=2))
print(nums)
print(maxums))
# Write a function that returns the larget element in a vectors
# of numbers
nums = c(seq(from=1,to=20, by=2))
print(nums)
print(max(nums))
# Write a function that returns the larget element in a vectors
# of numbers
nums = c(seq(from=1,to=20, by=2))
print(nums)
print(max(nums))
for (el in nums){
print(el)
}
source('E:/College/3rd Year/6th Semester/ML/Practicals/Q1.R', echo=TRUE)
# Write a function that returns the larget element in a vectors
# of numbers
nums = c(seq(from=1,to=20, by=2))
getMax = function(values){
res_max = -11
for (el in values){
if (el > res_max){
res_max = el
}
}
return res_max
}
print(getMax(nums))
# Write a function that returns the larget element in a vectors
# of numbers
nums = c(seq(from=1,to=20, by=2))
getMax = function(values){
res_max = -11
for (el in values){
if (el > res_max){
res_max = el
}
}
return(res_max)
}
print(getMax(nums))
# print(getMax(nums))
print(4 %in% nums)
# print(getMax(nums))
print(1 %in% nums)
print(c(1:10))
print(c(1:10:2))
print(c(1:10))
print(c(1:10) %% 2)
print(c(1:10) %% 2 == 0)
print(getMax(nums))
getEvenNumberSum(c(from=1,to=20))
# Function that returns the sum of even numbers from a vectors
getEvenNumberSum = function(values){
for (i in seq(from=2, to=length(values))){
print(i)
}
}
getEvenNumberSum(c(from=1,to=20))
# Function that returns the sum of even numbers from a vectors
getEvenNumberSum = function(values){
for (i in seq(from=2, to=length(values))){
print(i)
}
}
getEvenNumberSum(c(seq(from=1,to=20)))
# Function that returns the sum of even numbers from a vectors
getEvenNumberSum = function(values){
for (i in seq(from=2, to=length(values),by=2)){
print(i)
}
}
getEvenNumberSum(c(seq(from=1,to=20)))
# Function that returns the sum of even numbers from a vectors
getEvenNumberSum = function(values){
res_sum = 0
for (i in seq(from=2, to=length(values),by=2)){
res_sum = res_sum + values[i]
}
print(res_sum)
}
getEvenNumberSum(c(seq(from=1,to=20)))
# Function that returns the sum of even numbers from a vectors
getEvenNumberSum = function(values){
res_sum = 0
for (i in seq(from=2, to=length(values),by=2)){
res_sum = res_sum + values[i]
}
print(res_sum)
}
sprintf("The Sum of even number is %d", getEvenNumberSum(c(seq(from=1,to=20))))
# Function that returns the sum of even numbers from a vectors
getEvenNumberSum = function(values){
res_sum = 0
for (i in seq(from=2, to=length(values),by=2)){
res_sum = res_sum + values[i]
}
return(res_sum)
}
sprintf("The Sum of even number is %d", getEvenNumberSum(c(seq(from=1,to=20))))
print(searchNum(nums, 2001))
# Function that search for a number from a vectors of numbers
nums <- c(seq(from=1, to=100))
searchNum <- function(values, toBeFound){
found = FALSE
for (el in values){
if (el == toBeFound) {
return(TRUE)
}
}
return (FALSE)
}
print(searchNum(nums, 2001))
print(searchNum(nums, 121))
print(searchNum(nums, 99))
